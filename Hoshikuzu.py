import discord
from discord.ext import commands, tasks
import asyncio
from datetime import datetime, timedelta
import os
import random
import json
import math 
import urllib.parse # Pour l'encodage des URLs de recherche

ARROW_EMOJI = "<a:caarrow:1433143710094196997>"

import threading, http.server, socketserver, os

def keep_alive():
    """Ouvre un petit serveur HTTP sur le port requis par Render pour √©viter l'arr√™t automatique."""
    port = int(os.environ.get("PORT", 8080))
    handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", port), handler) as httpd:
        print(f"‚úÖ Serveur keep-alive lanc√© sur le port {port}")
        httpd.serve_forever()



class DataManager:
    """G√®re la lecture et l'√©criture des donn√©es persistantes (JSON)."""
    
    def __init__(self, filename="bot_data.json"):
        self.filename = filename
        self.data = self._load_data()

    def _load_data(self):
        """Charge les donn√©es du fichier JSON ou initialise un nouveau dictionnaire."""
        if os.path.exists(self.filename):
            with open(self.filename, 'r', encoding='utf-8') as f:
                try:
                    return json.load(f)
                except json.JSONDecodeError:
                    print("‚ö†Ô∏è Fichier de donn√©es JSON corrompu ou vide. Initialisation d'une structure vide.")
                    return {"economy": {}, "warnings": {}, "levels": {}}
        return {"economy": {}, "warnings": {}, "levels": {}}

    def _save_data(self):
        """Sauvegarde les donn√©es dans le fichier JSON."""
        with open(self.filename, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, indent=4)
            
    
    def get_user_warnings(self, user_id):
        user_id_str = str(user_id)
        return self.data.get('warnings', {}).get(user_id_str, [])
        
    def add_warning(self, guild_id, user_id, moderator_id, reason):
        user_id_str = str(user_id)
        moderator_id_str = str(moderator_id)
        
        warn_data = {
            "id": len(self.get_user_warnings(user_id)) + 1,
            "timestamp": datetime.now().isoformat(),
            "moderator_id": moderator_id_str,
            "reason": reason
        }
        
        if user_id_str not in self.data.get('warnings', {}):
            self.data['warnings'][user_id_str] = []
        
        self.data['warnings'][user_id_str].append(warn_data)
        self._save_data()
        return warn_data

    def remove_warning(self, user_id, warn_id):
        user_id_str = str(user_id)
        if user_id_str in self.data.get('warnings', {}):
            initial_count = len(self.data['warnings'][user_id_str])
            self.data['warnings'][user_id_str] = [
                warn for warn in self.data['warnings'][user_id_str] if warn['id'] != warn_id
            ]
            
            if len(self.data['warnings'][user_id_str]) < initial_count:
                self._save_data()
                return True
        return False
        

    def _get_eco_data(self, user_id):
        user_id_str = str(user_id)
        if user_id_str not in self.data.get('economy', {}):
            self.data['economy'][user_id_str] = {"balance": 0, "last_daily": None, "last_work": None}
            self._save_data()
        return self.data['economy'][user_id_str]

    def get_balance(self, user_id):
        return self._get_eco_data(user_id).get("balance", 0)

    def update_balance(self, user_id, amount):
        user_data = self._get_eco_data(user_id)
        user_data['balance'] += amount
        self._save_data()
        return user_data['balance']
        
    def set_balance(self, user_id, amount):
        user_data = self._get_eco_data(user_id)
        user_data['balance'] = amount
        self._save_data()
        return user_data['balance']

    def get_last_daily(self, user_id):
        last_daily_str = self._get_eco_data(user_id).get("last_daily")
        if last_daily_str:
            return datetime.fromisoformat(last_daily_str)
        return None

    def set_last_daily(self, user_id):
        user_data = self._get_eco_data(user_id)
        user_data["last_daily"] = datetime.now().isoformat()
        self._save_data()

    def get_last_work(self, user_id):
        last_work_str = self._get_eco_data(user_id).get("last_work")
        if last_work_str:
            return datetime.fromisoformat(last_work_str)
        return None

    def set_last_work(self, user_id):
        user_data = self._get_eco_data(user_id)
        user_data["last_work"] = datetime.now().isoformat()
        self._save_data()

    
    def _get_level_data(self, user_id):
        user_id_str = str(user_id)
        if user_id_str not in self.data.get('levels', {}):
            self.data['levels'][user_id_str] = {"level": 0, "xp": 0}
            self._save_data()
        return self.data['levels'][user_id_str]

    def get_level_info(self, user_id):
        data = self._get_level_data(user_id)
        return data['level'], data['xp']
        
    def add_xp(self, user_id, xp_amount):
        user_data = self._get_level_data(user_id)
        
        user_data['xp'] += xp_amount
        current_level = user_data['level']
        
        while user_data['xp'] >= self.required_xp(current_level + 1):
            current_level += 1
            user_data['level'] = current_level
            user_data['xp'] -= self.required_xp(current_level) 
            self._save_data() 
            return current_level 
            
        self._save_data()
        return None 
        
    def get_all_levels(self):
        return [
            (user_id, data['level'], data['xp'])
            for user_id, data in self.data.get('levels', {}).items()
        ]

    @staticmethod
    def required_xp(level):
        """Formule d'XP : 5 * level^2 + 50 * level + 100"""
        if level <= 0:
            return 0
        return 5 * level**2 + 50 * level + 100

data_manager = DataManager()



CONFIG_CHANNELS = {
    "WELCOME_CHANNEL_ID": 1433096078311293032,
    "LEAVE_CHANNEL_ID": 1433096160800804894,
    "WELCOME_EMBED_CHANNEL_ID": None, 
    "WELCOME_SIMPLE_CHANNEL_ID": 1433120551865417738,
    "LOGS_CHANNEL_ID": None, 
    "TICKET_CATEGORY_ID": None, 
    "BOOST_CHANNEL_ID": None, 
}

CONFIG_ROLES = {
    "SUPPORT_ROLE_ID": None, 
}

LEVELING_SETTINGS = {
    "COOLDOWN_SECONDS": 60, 
    "XP_RANGE_MIN": 15,     
    "XP_RANGE_MAX": 25,     
}

xp_cooldown_cache = {}

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True 
intents.reactions = True 

bot = commands.Bot(command_prefix='+', intents=intents, help_command=None)

def get_channel_by_config(key):
    return bot.get_channel(CONFIG_CHANNELS.get(key))

def get_role_by_config(key):
    role_id = CONFIG_ROLES.get(key)
    if role_id and bot.guilds:
        return discord.utils.get(bot.guilds[0].roles, id=role_id)
    return None

async def send_to_logs(guild, embed):
    logs_channel = get_channel_by_config("LOGS_CHANNEL_ID")
    if logs_channel:
        try:
            await logs_channel.send(embed=embed)
        except discord.Forbidden:
            print(f"‚ùå Erreur: Le bot ne peut pas envoyer de message dans le salon de logs ({logs_channel.name}).")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'envoi au salon de logs: {e}")



class RoleButtonView(discord.ui.View):
    """Vue persistante pour g√©rer l'attribution et le retrait des r√¥les via boutons."""
    def __init__(self):
        super().__init__(timeout=None)

    
    @discord.ui.button(label="üì¢ Annonces", style=discord.ButtonStyle.secondary, custom_id="role_annonces_id")
    async def role_annonces_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        ROLE_ID = 1433143710094196998
        await self.toggle_role(interaction, ROLE_ID, "Annonces")

    @discord.ui.button(label="üéâ √âv√©nements", style=discord.ButtonStyle.secondary, custom_id="role_evenements_id")
    async def role_evenements_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        ROLE_ID = 1433143710094196999
        await self.toggle_role(interaction, ROLE_ID, "√âv√©nements")


    async def toggle_role(self, interaction: discord.Interaction, role_id: int, role_name: str):
        """Fonction utilitaire pour ajouter ou retirer un r√¥le."""
        role = interaction.guild.get_role(role_id)
        
        if not role:
            return await interaction.response.send_message(
                f"‚ùå Le r√¥le '**{role_name}**' n'existe pas ou n'est pas configur√©. (ID: {role_id})",
                ephemeral=True
            )

        member = interaction.user
        if role in member.roles:
            await member.remove_roles(role, reason="R√¥le Retir√© via Bouton")
            await interaction.response.send_message(
                f"‚úÖ Le r√¥le **{role_name}** a √©t√© **retir√©**.",
                ephemeral=True
            )
        else:
            await member.add_roles(role, reason="R√¥le Ajout√© via Bouton")
            await interaction.response.send_message(
                f"‚úÖ Le r√¥le **{role_name}** a √©t√© **ajout√©**.",
                ephemeral=True
            )


class TicketCreateView(discord.ui.View):
    """Vue contenant le bouton pour ouvrir un ticket."""
    def __init__(self, bot_instance):
        super().__init__(timeout=None) 
        self.bot = bot_instance
        
    @discord.ui.button(label="üì© Ouvrir un Ticket", style=discord.ButtonStyle.blurple, custom_id="ticket_button_create")
    async def create_ticket_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        user = interaction.user
        guild = interaction.guild
        
        category_id = CONFIG_CHANNELS.get("TICKET_CATEGORY_ID")
        support_role = get_role_by_config("SUPPORT_ROLE_ID")
        
        if not category_id or not support_role:
            await interaction.response.send_message(
                "‚ùå **Erreur Configuration** : La cat√©gorie ou le r√¥le de support n'est pas configur√©. Demandez √† un administrateur.", 
                ephemeral=True
            )
            return

        category = self.bot.get_channel(category_id)
        if not category or not isinstance(category, discord.CategoryChannel):
            await interaction.response.send_message(
                "‚ùå **Erreur Configuration** : La cat√©gorie de ticket est invalide. Demandez √† un administrateur.", 
                ephemeral=True
            )
            return

        for channel in category.text_channels:
            if channel.topic and str(user.id) in channel.topic: 
                await interaction.response.send_message(
                    f"‚ùå Vous avez d√©j√† un ticket ouvert : {channel.mention}", 
                    ephemeral=True
                )
                return
            
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False), 
            user: discord.PermissionOverwrite(
                view_channel=True, 
                send_messages=True, 
                read_message_history=True, 
                attach_files=True
            ), 
            support_role: discord.PermissionOverwrite(
                view_channel=True, 
                send_messages=True, 
                read_message_history=True, 
                manage_channels=True 
            ), 
            guild.me: discord.PermissionOverwrite(view_channel=True) 
        }
        
        channel_name = f"ticket-{user.name.lower().replace(' ', '-').replace('.', '')}"[:100]
        try:
            ticket_channel = await guild.create_text_channel(
                name=channel_name, 
                category=category, 
                overwrites=overwrites,
                topic=f"Ticket ouvert par {user.name} ({user.id}) le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}"
            )

            embed = discord.Embed(
                title="üé´ Ticket Ouvert",
                description=f"Bienvenue {user.mention} ! L'√©quipe de support a √©t√© notifi√©e et vous r√©pondra d√®s que possible.\n\nD√©crivez votre probl√®me en d√©tail ci-dessous.",
                color=discord.Color.blue()
            )
            embed.add_field(name="R√¥le Support", value=support_role.mention)
            
            await ticket_channel.send(f"{user.mention} {support_role.mention}", embed=embed, view=TicketCloseView())
            await interaction.response.send_message(f"‚úÖ Votre ticket est ouvert dans {ticket_channel.mention} !", ephemeral=True)

        except discord.Forbidden:
            await interaction.response.send_message("‚ùå Je n'ai pas les permissions n√©cessaires pour cr√©er des canaux (V√©rifiez les r√¥les/cat√©gories).", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Erreur inattendue : {e}", ephemeral=True)


class TicketCloseView(discord.ui.View):
    """Vue contenant le bouton pour fermer et supprimer le ticket."""
    def __init__(self):
        super().__init__(timeout=None) 
        
    @discord.ui.button(label="üîí Fermer le Ticket", style=discord.ButtonStyle.red, custom_id="ticket_button_close")
    async def close_ticket_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        
        support_role = get_role_by_config("SUPPORT_ROLE_ID")
        is_staff = support_role and support_role in interaction.user.roles
        
        if not interaction.channel.name.startswith("ticket-"):
            await interaction.response.send_message("‚ùå Ce n'est pas un canal de ticket.", ephemeral=True)
            return
        
        is_ticket_owner = False
        if interaction.channel.topic:
            user_id_in_topic = interaction.channel.topic.split('(')[-1].split(')')[0] if interaction.channel.topic else None
            is_ticket_owner = str(interaction.user.id) == user_id_in_topic
            
        if not is_staff and not interaction.user.top_role.permissions.administrator and not is_ticket_owner:
            await interaction.response.send_message("‚ùå Vous n'avez pas la permission de fermer ce ticket.", ephemeral=True)
            return

        await interaction.response.send_message(f"üîí Ticket ferm√© par {interaction.user.mention}. Suppression dans 5 secondes...")
        await asyncio.sleep(5)
        
        try:
            await interaction.channel.delete(reason=f"Ticket ferm√© par {interaction.user.display_name}")
        except discord.Forbidden:
            logs_channel = get_channel_by_config("LOGS_CHANNEL_ID")
            if logs_channel:
                await logs_channel.send(f"‚ùå Le bot n'a pas pu supprimer le canal de ticket {interaction.channel.name} par manque de permissions.")
        except Exception as e:
            print(f"Erreur lors de la suppression du ticket: {e}")



@bot.event
async def on_ready():
    """Se d√©clenche lorsque le bot est pr√™t."""
    print('=' * 60)
    print(f"ü§ñ Bot connect√©: {bot.user.name}")
    print(f"üÜî ID: {bot.user.id}")
    print(f"üìä Serveurs: {len(bot.guilds)}")
    print(f"üë• Utilisateurs globaux: {len(bot.users)}") 
    print('=' * 60)

    bot.add_view(TicketCreateView(bot))
    bot.add_view(TicketCloseView())
    bot.add_view(RoleButtonView())
    
    await bot.change_presence(
        activity=discord.Game(name="Hoshikuzu | +help"),
        status=discord.Status.dnd
    )
    giveaway_task.start()

@bot.event
async def on_command_error(ctx: commands.Context, error: commands.CommandError):
    """Gestion d'erreur globale pour les commandes."""
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"‚ùå **Argument manquant** : Il manque un argument. V√©rifie la commande `+help`.")
    elif isinstance(error, commands.MemberNotFound):
        await ctx.send("‚ùå **Membre introuvable** : Impossible de trouver ce membre.")
    elif isinstance(error, commands.RoleNotFound):
        await ctx.send("‚ùå **R√¥le introuvable** : Impossible de trouver ce r√¥le.")
    elif isinstance(error, commands.ChannelNotFound):
        await ctx.send("‚ùå **Salon introuvable** : Impossible de trouver ce salon.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send(f"‚ùå **Mauvais argument** : Un argument n'est pas au format attendu.")
    elif isinstance(error, commands.MissingPermissions):
        perms_needed = ", ".join(error.missing_permissions)
        await ctx.send(f"‚ùå **Permissions manquantes** : Tu n'as pas la permission de `{perms_needed}`.")
    elif isinstance(error, commands.BotMissingPermissions):
        perms_needed = ", ".join(error.missing_permissions)
        await ctx.send(f"‚ùå **Permissions du Bot manquantes** : Le bot a besoin de la permission de `{perms_needed}`.")
    elif isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"‚è≥ Cette commande est en **cooldown**. R√©essaie dans {error.retry_after:.2f}s.")
    else:
        cmd_name = ctx.command.name if ctx.command else "inconnue"
    print(f"Erreur non g√©r√©e dans la commande {cmd_name}: {error}")

@bot.event
async def on_message(message: discord.Message):
    """G√®re l'attribution d'XP et le traitement des commandes."""
    if message.author.bot or not message.guild:
        return

    user_id = message.author.id
    now = datetime.now()
    
    last_xp_time = xp_cooldown_cache.get(user_id)
    if last_xp_time is None or (now - last_xp_time).total_seconds() >= LEVELING_SETTINGS["COOLDOWN_SECONDS"]:
        
        xp_gained = random.randint(LEVELING_SETTINGS["XP_RANGE_MIN"], LEVELING_SETTINGS["XP_RANGE_MAX"])
        new_level = data_manager.add_xp(user_id, xp_gained)
        
        xp_cooldown_cache[user_id] = now 

        if new_level is not None:
            await message.channel.send(f"‚ú® **F√©licitations** {message.author.mention} ! Vous √™tes pass√© au **Niveau {new_level}** ! üéâ")

    await bot.process_commands(message)


@bot.event
async def on_member_join(member: discord.Member):
    """Message de bienvenue √©l√©gant avec embed et message simple"""
    
    embed_channel = get_channel_by_config("WELCOME_EMBED_CHANNEL_ID")
    simple_channel = get_channel_by_config("WELCOME_SIMPLE_CHANNEL_ID")
    
    if embed_channel:
        member_count = len(member.guild.members)
        welcome_embed = discord.Embed(
            title="üå∏ Bienvenue sur Hoshikuzu !",
            description=f"Salut {member.mention} ! üëã\nTu es notre **{member_count}√®me** membre ! üéâ",
            color=discord.Color.purple(),
            timestamp=datetime.now()
        )
        welcome_embed.set_thumbnail(url=member.display_avatar.url)
        welcome_embed.set_footer(text="√âquipe Hoshikuzu", icon_url=member.guild.icon.url if member.guild.icon else None)
        await embed_channel.send(embed=welcome_embed)
    
    if simple_channel:
        member_count = len(member.guild.members)
        message = (
            f"Bienvenue {member.mention} sur Hoshikuzu ! Nous sommes ravis de t'accueillir ! üéâ\n"
            f"Nous sommes d√©sormais **{member_count}** membres sur Hoshikuzu ! ‚ú®"
        )
        await simple_channel.send(message)
    
    try:
        dm_embed = discord.Embed(
            title="üéâ Bienvenue sur Hoshikuzu !",
            description=f"Salut **{member.display_name}** ! üëã Nous sommes ravis de t'accueillir !",
            color=discord.Color.green(),
        )
        dm_embed.add_field(name="üìù Pour bien commencer", value="‚Ä¢ Lis les r√®gles\n‚Ä¢ Amuse-toi bien !", inline=False)
        await member.send(embed=dm_embed)
    except discord.Forbidden:
        pass

@bot.event
async def on_member_remove(member: discord.Member):
    """Message d'au revoir √©l√©gant avec embed"""
    leave_channel = get_channel_by_config("LEAVE_CHANNEL_ID")

    if leave_channel:
        member_count = len(member.guild.members)
        leave_embed = discord.Embed(
            title="üëã Au revoir...",
            description=f"**{member.display_name}** vient de quitter **Hoshikuzu**\nNous sommes maintenant **{member_count}** membres.",
            color=discord.Color.red(),
            timestamp=datetime.now()
        )
        leave_embed.set_thumbnail(url=member.display_avatar.url)
        joined_date = member.joined_at.strftime('%d/%m/%Y') if member.joined_at else "Inconnue"
        leave_embed.set_footer(text=f"Membre depuis le {joined_date}", icon_url=member.guild.icon.url if member.guild.icon else None)
        await leave_channel.send(embed=leave_embed)


@bot.event
async def on_member_update(before: discord.Member, after: discord.Member):
    """D√©tecte si un membre commence √† booster le serveur."""
    


@bot.event
async def on_member_join(member: discord.Member):
    """Message de bienvenue √©l√©gant avec embed et message simple"""
    
    embed_channel = get_channel_by_config("WELCOME_EMBED_CHANNEL_ID")
    simple_channel = get_channel_by_config("WELCOME_SIMPLE_CHANNEL_ID")
    member_count = len(member.guild.members) # R√©cup√©ration du compte une seule fois
    
    if embed_channel:
        welcome_embed = discord.Embed(
            title="üå∏ Bienvenue sur Hoshikuzu !",
            description=f"Salut {member.mention} ! üëã\nTu es notre **{member_count}√®me** membre ! üéâ",
            color=discord.Color.purple(),
            timestamp=datetime.now()
        )
        welcome_embed.set_thumbnail(url=member.display_avatar.url)
        welcome_embed.set_footer(text="√âquipe Hoshikuzu", icon_url=member.guild.icon.url if member.guild.icon else None)
        await embed_channel.send(embed=welcome_embed)
    
    if simple_channel:
        message = (
            f"{ARROW_EMOJI} Bienvenue {member.mention} sur Hoshikuzu ! Nous sommes ravis de t'accueillir ! üéâ\n"
            f"{ARROW_EMOJI} Nous sommes d√©sormais **{member_count}** membres sur Hoshikuzu ! ‚ú®"
        )
        await simple_channel.send(message)

    dm_embed = discord.Embed(
        title="üéâ Bienvenue sur Hoshikuzu !",
        description=(
            f"{ARROW_EMOJI} Salut {member.mention} ! üëã\n"
            f"{ARROW_EMOJI} Tu es notre **{member_count}√®me** membre ! üéâ"
        ),
        color=discord.Color.green(),
    )
    dm_embed.add_field(name="üìù Pour bien commencer", value="‚Ä¢ Lis les r√®gles\n‚Ä¢ Amuse-toi bien !", inline=False)
    
    try:
        await member.send(embed=dm_embed)
        print(f"DM de bienvenue envoy√© avec succ√®s √† {member.name}.")
        
    except discord.Forbidden:
        print(f"√âchec du DM √† {member.name}. (DMs d√©sactiv√©s par l'utilisateur)")
        pass 
        
    except discord.HTTPException as e:
        if e.code == 40003: # Code 40003: Rate Limit
            print(f"Discord Rate Limit (40003): Impossible d'envoyer un DM √† {member.name}. Trop de DMs ouverts trop rapidement.")
        else:
            print(f"Une erreur HTTP inattendue est survenue lors de l'envoi du DM √† {member.name}: {e}")
        pass

    embed = discord.Embed(
        title="üìù Message Modifi√©",
        color=discord.Color.dark_teal(),
        timestamp=datetime.now()
    )
    embed.add_field(name="Auteur", value=before.author.mention, inline=True)
    embed.add_field(name="Salon", value=before.channel.mention, inline=True)
    
    embed.add_field(name="Avant", value=f"```\n{before.content[:500]}\n```", inline=False)
    embed.add_field(name="Apr√®s", value=f"```\n{after.content[:500]}\n```", inline=False)
    embed.set_footer(text=f"ID: {before.id}")
    
    await send_to_logs(before.guild, embed)

@bot.event
async def on_member_ban(guild: discord.Guild, user: discord.User):
    """Log les bannissements"""
    embed = discord.Embed(
        title="üî® Membre Banni",
        description=f"**{user.display_name}** a √©t√© banni du serveur.",
        color=discord.Color.red(),
        timestamp=datetime.now()
    )
    embed.set_thumbnail(url=user.display_avatar.url)
    embed.add_field(name="ID", value=user.id, inline=False)
    
    await send_to_logs(guild, embed)

@bot.event
async def on_member_unban(guild: discord.Guild, user: discord.User):
    """Log les d√©bannissements"""
    embed = discord.Embed(
        title="üîì Membre D√©banni",
        description=f"**{user.display_name}** a √©t√© d√©banni du serveur.",
        color=discord.Color.green(),
        timestamp=datetime.now()
    )
    embed.set_thumbnail(url=user.display_avatar.url)
    embed.add_field(name="ID", value=user.id, inline=False)
    
    await send_to_logs(guild, embed)



@bot.command(name='setlogs')
@commands.has_permissions(administrator=True)
async def set_logs_channel(ctx: commands.Context, channel: discord.TextChannel):
    """Configure le salon de logs pour la journalisation"""
    CONFIG_CHANNELS["LOGS_CHANNEL_ID"] = channel.id

    embed = discord.Embed(
        description=f"‚úÖ Le salon de **Logs** a √©t√© configur√© sur {channel.mention}. Les messages supprim√©s/modifi√©s, bans, etc. y seront envoy√©s.",
        color=discord.Color.green()
    )
    await ctx.send(embed=embed)

@bot.command(name='setboostchannel')
@commands.has_permissions(administrator=True)
async def set_boost_channel(ctx: commands.Context, channel: discord.TextChannel):
    """Configure le salon pour les messages de remerciement de boost."""
    CONFIG_CHANNELS["BOOST_CHANNEL_ID"] = channel.id
    embed = discord.Embed(description=f"‚úÖ Le salon des **Remerciements de Boost** a √©t√© configur√© sur {channel.mention}.", color=discord.Color.green())
    await ctx.send(embed=embed)

@bot.command(name='setticketcategory')
@commands.has_permissions(administrator=True)
async def set_ticket_category(ctx: commands.Context, category: discord.CategoryChannel):
    """Configure la cat√©gorie o√π les tickets seront cr√©√©s."""
    CONFIG_CHANNELS["TICKET_CATEGORY_ID"] = category.id
    embed = discord.Embed(description=f"‚úÖ La **Cat√©gorie de Tickets** a √©t√© configur√©e sur **{category.name}**.", color=discord.Color.green())
    await ctx.send(embed=embed)

@bot.command(name='setticketrole')
@commands.has_permissions(administrator=True)
async def set_ticket_role(ctx: commands.Context, role: discord.Role):
    """Configure le r√¥le qui aura acc√®s aux tickets."""
    CONFIG_ROLES["SUPPORT_ROLE_ID"] = role.id
    embed = discord.Embed(description=f"‚úÖ Le **R√¥le de Support/Staff** a √©t√© configur√© sur {role.mention}.", color=discord.Color.green())
    await ctx.send(embed=embed)


@bot.command(name='sendticketpanel')
@commands.has_permissions(administrator=True)
async def send_ticket_panel(ctx: commands.Context, channel: discord.TextChannel = None):
    """Envoie le message avec le bouton pour ouvrir un ticket."""
    
    if not CONFIG_CHANNELS.get("TICKET_CATEGORY_ID") or not CONFIG_ROLES.get("SUPPORT_ROLE_ID"):
        return await ctx.send("‚ùå Vous devez d'abord configurer la cat√©gorie et le r√¥le de support avec `+setticketcategory` et `+setticketrole`.")
        
    target_channel = channel or ctx.channel
    
    embed = discord.Embed(
        title="Centre d'Aide et Support üì©",
        description="Cliquez sur le bouton ci-dessous pour ouvrir un **ticket priv√©** avec l'√©quipe de mod√©ration/support.\n\n*Veuillez d√©crire votre probl√®me en d√©tail.*",
        color=discord.Color.dark_purple()
    )
    
    await target_channel.send(embed=embed, view=TicketCreateView(bot))
    if target_channel != ctx.channel:
        await ctx.send(f"‚úÖ Le panneau de tickets a √©t√© envoy√© dans {target_channel.mention}", delete_after=5)
        
@bot.command(name='sendrolespanel')
@commands.has_permissions(administrator=True)
async def send_roles_panel(ctx: commands.Context, channel: discord.TextChannel = None):
    """Envoie le panneau des R√¥les par R√©action avec des boutons."""
    target_channel = channel or ctx.channel

    embed = discord.Embed(
        title="‚ú® Choisissez vos R√¥les de Notification",
        description="Cliquez sur les boutons ci-dessous pour vous attribuer ou retirer le r√¥le correspondant.",
        color=discord.Color.from_rgb(255, 105, 180) # Rose vif
    )

    await target_channel.send(embed=embed, view=RoleButtonView())
    if target_channel != ctx.channel:
        await ctx.send(f"‚úÖ Le panneau de R√¥les par R√©action a √©t√© envoy√© dans {target_channel.mention}", delete_after=5)


@bot.command(name='sendrules')
@commands.has_permissions(administrator=True)
async def send_rules_panel(ctx: commands.Context, channel: discord.TextChannel = None):
    """Envoie l'embed des r√®gles dans un salon sp√©cifi√©."""
    
    target_channel = channel or ctx.channel
    
    embed = discord.Embed(
        title="üìú R√®glement du Serveur Hoshikuzu",
        description="Bienvenue sur le serveur Hoshikuzu ! üëã\nAvant de plonger dans la communaut√©, merci de lire attentivement les r√®gles ci-dessous üëá",
        color=discord.Color.blue(),
        timestamp=datetime.now()
    )

    embed.add_field(
        name="ü§ù Respect & Politesse",
        value="""
        ‚ûú **Aucune insulte, provocation, harc√®lement** ou **discrimination** ne sera tol√©r√©(e).
        ‚ûú Sois **poli(e) et bienveillant(e)** envers tout le monde.
        """,
        inline=False
    )

    embed.add_field(
        name="üö´ Spam, Pub & Contenu Interdit",
        value="""
        ‚ûú Pas de **spam, flood** ou **pub** sans autorisation.
        ‚ûú **√âvite les sujets sensibles** (politique, religion, etc.).
        ‚ûú **Interdiction de poster du contenu NSFW, choquant ou ill√©gal** sous peine de **BAN DEF**.
        ‚ûú Les memes et images sont autoris√©s tant qu‚Äôils restent **respectueux**.
        ‚ûú **Garde les discussions dans les bons canaux** (ex : ‚Å†#m√©dia, #commandes).
        """,
        inline=False
    )
    
    embed.add_field(
        name="üö® S√©curit√© et Staff",
        value="""
        ‚ûú Ne partage **pas d‚Äôinformations personnelles**.
        ‚ûú Aucune **arnaque, phishing, lien suspect ou piratage**.
        ‚ûú Les **mod√©rateurs** sont l√† pour aider et maintenir l'ordre.
        ‚ûú **Respecte leurs d√©cisions**, elles sont prises pour le bien de tous.
        ‚ûú Les **tickets** sont mis √† disposition si vous avez un probl√®me.
        """,
        inline=False
    )

    embed.set_footer(text="En restant ici, tu acceptes ces r√®gles. Amuse-toi bien et sois le/la bienvenu(e) parmi nous !")
    
    await target_channel.send(embed=embed)
    
    if target_channel != ctx.channel:
        await ctx.send(f"‚úÖ L'embed des r√®gles a √©t√© envoy√© dans {target_channel.mention}", delete_after=5)


@bot.command(name='welcomechat')
@commands.has_permissions(administrator=True)
async def set_welcome_channel(ctx: commands.Context, channel: discord.TextChannel):
    """Configure le salon de bienvenue (ancien syst√®me)"""
    CONFIG_CHANNELS["WELCOME_CHANNEL_ID"] = channel.id
    await ctx.send(f"‚úÖ Les messages de bienvenue (ancien ID) seront envoy√©s dans {channel.mention}")

@bot.command(name='welcomeembed')
@commands.has_permissions(administrator=True)
async def set_welcome_embed_channel(ctx: commands.Context, channel: discord.TextChannel):
    """Configure le salon pour le message de bienvenue avec embed"""
    CONFIG_CHANNELS["WELCOME_EMBED_CHANNEL_ID"] = channel.id
    embed = discord.Embed(description=f"‚úÖ Le message de bienvenue **avec embed** sera envoy√© dans {channel.mention}", color=discord.Color.green())
    await ctx.send(embed=embed)

@bot.command(name='welcomesimple')
@commands.has_permissions(administrator=True)
async def set_welcome_simple_channel(ctx: commands.Context, channel: discord.TextChannel):
    """Configure le salon pour le message de bienvenue simple"""
    CONFIG_CHANNELS["WELCOME_SIMPLE_CHANNEL_ID"] = channel.id
    embed = discord.Embed(description=f"‚úÖ Le message de bienvenue **simple** sera envoy√© dans {channel.mention}", color=discord.Color.green())
    await ctx.send(embed=embed)

@bot.command(name='leavechat')
@commands.has_permissions(administrator=True)  
async def set_leave_channel(ctx: commands.Context, channel: discord.TextChannel):
    """Configure le salon des d√©parts"""
    CONFIG_CHANNELS["LEAVE_CHANNEL_ID"] = channel.id
    await ctx.send(f"‚úÖ Les messages de d√©part seront envoy√©s dans {channel.mention}")

@bot.command(name='config')
@commands.has_permissions(administrator=True)
async def show_config(ctx: commands.Context):
    """Affiche la configuration des salons (Mise √† jour pour les tickets et boost)."""
    embed_channel = get_channel_by_config("WELCOME_EMBED_CHANNEL_ID")
    simple_channel = get_channel_by_config("WELCOME_SIMPLE_CHANNEL_ID")
    leave_channel = get_channel_by_config("LEAVE_CHANNEL_ID")
    logs_channel = get_channel_by_config("LOGS_CHANNEL_ID") 
    ticket_category = get_channel_by_config("TICKET_CATEGORY_ID") 
    support_role = get_role_by_config("SUPPORT_ROLE_ID") 
    boost_channel = get_channel_by_config("BOOST_CHANNEL_ID")

    embed = discord.Embed(title="‚öôÔ∏è Configuration du Bot", color=discord.Color.blue(), timestamp=datetime.now())

    embed.add_field(name="--- Bienvenue/D√©part/Boost ---", value=" ", inline=False)
    embed.add_field(name="üè† Bienvenue (Embed)", value=embed_channel.mention if embed_channel else "‚ùå Non configur√©", inline=False)
    embed.add_field(name="üí¨ Bienvenue (Simple)", value=simple_channel.mention if simple_channel else "‚ùå Non configur√©", inline=False)
    embed.add_field(name="üëã Salons des d√©parts", value=leave_channel.mention if leave_channel else "‚ùå Non configur√©", inline=False)
    embed.add_field(name="‚ú® Salon de Boost", value=boost_channel.mention if boost_channel else "‚ùå Non configur√©", inline=False)
    
    embed.add_field(name="--- Tickets et Logs ---", value=" ", inline=False) 
    embed.add_field(name="üìù Salon de Logs", value=logs_channel.mention if logs_channel else "‚ùå Non configur√©", inline=False)
    embed.add_field(name="üé´ Cat√©gorie Ticket", value=ticket_category.mention if ticket_category else "‚ùå Non configur√©", inline=False)
    embed.add_field(name="üëÆ R√¥le Support", value=support_role.mention if support_role else "‚ùå Non configur√©", inline=False)


    embed.set_footer(text=f"Demand√© par {ctx.author.display_name}")
    await ctx.send(embed=embed)



@bot.command(name='ban')
@commands.has_permissions(ban_members=True)
async def ban_member(ctx: commands.Context, member: discord.Member, *, raison="Aucune raison fournie"):
    """Bannit un membre du serveur"""
    if member.top_role >= ctx.author.top_role:
        return await ctx.send("‚ùå Ce membre a un r√¥le sup√©rieur ou √©gal au tien !")
    
    try:
        await member.ban(reason=f"Par {ctx.author} - {raison}")
        embed = discord.Embed(title="üî® Membre banni", description=f"**{member.display_name}** a √©t√© banni", color=discord.Color.red())
        embed.add_field(name="üìù Raison", value=raison)
        await ctx.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas les permissions pour bannir ce membre !")

@bot.command(name='kick')
@commands.has_permissions(kick_members=True)
async def kick_member(ctx, member: discord.Member, *, raison="Aucune raison fournie"):
    """Expulse un membre du serveur"""
    if member == ctx.author:
        return await ctx.send("‚ùå Tu ne peux pas t'expulser toi-m√™me !")
    if member.top_role >= ctx.author.top_role:
        return await ctx.send("‚ùå Ce membre a un r√¥le sup√©rieur ou √©gal au tien !")
    try:
        await member.kick(reason=f"Par {ctx.author} - {raison}")
        embed = discord.Embed(title="üë¢ Membre expuls√©", description=f"**{member.display_name}** a √©t√© expuls√©", color=discord.Color.orange())
        embed.add_field(name="üìù Raison", value=raison)
        await ctx.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas les permissions pour expulser ce membre !")

@bot.command(name='mute')
@commands.has_permissions(moderate_members=True)
async def mute_member(ctx, member: discord.Member, duration: int = 10, *, raison="Aucune raison fournie"):
    """Timeout un membre (dur√©e en minutes)"""
    if duration > 40320: return await ctx.send("‚ùå Dur√©e maximale : 40320 minutes (28 jours) !")
    try:
        timeout_duration = timedelta(minutes=duration)
        await member.timeout(timeout_duration, reason=f"Par {ctx.author} - {raison}")
        embed = discord.Embed(title="üîá Membre timeout", description=f"**{member.display_name}** mis en timeout pour {duration} min", color=discord.Color.orange())
        await ctx.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas les permissions pour timeout ce membre !")

@bot.command(name='unmute')
@commands.has_permissions(moderate_members=True)
async def unmute_member(ctx, member: discord.Member):
    """Retire le timeout d'un membre"""
    if member.timed_out_until is None: return await ctx.send("‚ùå Ce membre n'est pas en timeout !")
    try:
        await member.timeout(None, reason=f"D√©mut√© par {ctx.author}")
        embed = discord.Embed(title="üîä Membre d√©mut√©", description=f"**{member.display_name}** peut de nouveau parler", color=discord.Color.green())
        await ctx.send(embed=embed)
    except Exception as e:
        await ctx.send(f"‚ùå Erreur : {e}")

@bot.command(name='clear', aliases=['purge', 'clean'])
@commands.has_permissions(manage_messages=True)
async def clear_messages(ctx, amount: int = 10):
    """Supprime un nombre de messages"""
    if amount > 100: return await ctx.send("‚ùå Maximum 100 messages √† la fois !")
    try:
        deleted = await ctx.channel.purge(limit=amount + 1)
        msg = await ctx.send(f"‚úÖ **{len(deleted) - 1}** messages supprim√©s !", delete_after=3)
        embed = discord.Embed(
            title="üßπ Purge de messages",
            description=f"**{len(deleted) - 1}** messages supprim√©s par {ctx.author.mention} dans {ctx.channel.mention}.",
            color=discord.Color.blue()
        )
        await send_to_logs(ctx.guild, embed)
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas les permissions pour supprimer des messages !")

@bot.command(name='close', aliases=['fermer'])
@commands.has_permissions(manage_channels=True)
async def close_ticket_command(ctx: commands.Context):
    """Ferme le ticket actuel (doit √™tre utilis√© dans un canal de ticket)"""
    if not ctx.channel.name.startswith("ticket-"):
        return await ctx.send("‚ùå Cette commande ne peut √™tre utilis√©e que dans un canal de ticket.")
    
    await ctx.send(f"üîí Ticket ferm√© par {ctx.author.mention}. Suppression du canal dans 5 secondes...")
    await asyncio.sleep(5)
    await ctx.channel.delete(reason=f"Ticket ferm√© par commande par {ctx.author.display_name}")

@bot.command(name='add')
@commands.has_permissions(manage_channels=True)
async def add_member_to_ticket(ctx: commands.Context, member: discord.Member):
    """Ajoute un membre au ticket actuel."""
    if not ctx.channel.name.startswith("ticket-"):
        return await ctx.send("‚ùå Cette commande ne peut √™tre utilis√©e que dans un canal de ticket.")
    
    try:
        await ctx.channel.set_permissions(member, view_channel=True, send_messages=True)
        await ctx.send(f"‚úÖ {member.mention} a √©t√© ajout√© au ticket.")
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas la permission de modifier les permissions du canal.")
        


@bot.command(name='warn')
@commands.has_permissions(kick_members=True) # Permission g√©n√©ralement utilis√©e pour le warn
async def warn_member(ctx: commands.Context, member: discord.Member, *, raison: str):
    """Donne un avertissement √† un membre et l'enregistre."""
    if member.bot: return await ctx.send("‚ùå Vous ne pouvez pas donner d'avertissement √† un bot.")
    if member == ctx.author: return await ctx.send("‚ùå Vous ne pouvez pas vous avertir vous-m√™me.")

    warn_data = data_manager.add_warning(ctx.guild.id, member.id, ctx.author.id, raison)
    warn_count = len(data_manager.get_user_warnings(member.id))

    embed = discord.Embed(
        title="üö® Avertissement Enregistr√©",
        description=f"**{member.display_name}** a re√ßu un avertissement.",
        color=discord.Color.orange(),
        timestamp=datetime.now()
    )
    embed.add_field(name="Mod√©rateur", value=ctx.author.mention, inline=True)
    embed.add_field(name="Total Warns", value=warn_count, inline=True)
    embed.add_field(name="Raison", value=raison, inline=False)

    await ctx.send(embed=embed)
    
    try:
        await member.send(f"üö® **AVERTISSEMENT** sur le serveur **{ctx.guild.name}**:\nMod√©rateur: {ctx.author.name}\nRaison: {raison}\nTotal: {warn_count}")
    except discord.Forbidden:
        pass
    
    await send_to_logs(ctx.guild, embed)
    
@bot.command(name='warnings', aliases=['warns'])
@commands.has_permissions(kick_members=True)
async def check_warnings(ctx: commands.Context, member: discord.Member):
    """Affiche tous les avertissements d'un membre."""
    warnings = data_manager.get_user_warnings(member.id)
    
    if not warnings:
        return await ctx.send(f"‚úÖ **{member.display_name}** n'a aucun avertissement actif.")
        
    description = f"**Total : {len(warnings)}**\n\n"
    
    for warn in warnings:
        moderator = await bot.fetch_user(warn['moderator_id'])
        date = datetime.fromisoformat(warn['timestamp']).strftime('%d/%m/%Y √† %H:%M')
        description += (
            f"**ID: #{warn['id']}**\n"
            f"‚ûú **Date :** {date}\n"
            f"‚ûú **Mod√©rateur :** {moderator.display_name}\n"
            f"‚ûú **Raison :** {warn['reason']}\n"
            f"----\n"
        )
        
    embed = discord.Embed(
        title=f"üìã Avertissements de {member.display_name}",
        description=description[:2048], # Limite √† 2048 caract√®res
        color=discord.Color.blue()
    )
    await ctx.send(embed=embed)

@bot.command(name='delwarn', aliases=['unwarn', 'remwarn'])
@commands.has_permissions(administrator=True) # N√©cessite l'admin pour supprimer un warn
async def delete_warning(ctx: commands.Context, member: discord.Member, warn_id: int):
    """Supprime un avertissement par son ID."""
    if data_manager.remove_warning(member.id, warn_id):
        embed = discord.Embed(
            description=f"‚úÖ L'avertissement **#{warn_id}** de {member.mention} a √©t√© **supprim√©**.",
            color=discord.Color.green()
        )
        await ctx.send(embed=embed)
        log_embed = discord.Embed(
            title="‚úÖ Avertissement Supprim√©",
            description=f"**Warn ID #{warn_id}** supprim√© pour {member.mention} par {ctx.author.mention}.",
            color=discord.Color.green()
        )
        await send_to_logs(ctx.guild, log_embed)
    else:
        await ctx.send(f"‚ùå Avertissement **#{warn_id}** non trouv√© pour {member.mention}.")



@bot.command(name='balance', aliases=['bal', 'money'])
async def show_balance(ctx: commands.Context, member: discord.Member = None):
    """Affiche le solde (la balance) d'un membre."""
    member = member or ctx.author
    balance = data_manager.get_balance(member.id)
    
    emoji = "‚≠ê" # Monnaie du serveur
    
    embed = discord.Embed(
        title=f"üí∞ Solde de {member.display_name}",
        description=f"**{member.display_name}** poss√®de **{balance} {emoji}**.",
        color=discord.Color.gold()
    )
    await ctx.send(embed=embed)

@bot.command(name='daily')
@commands.cooldown(1, 86400, commands.BucketType.user) # 86400 secondes = 24 heures
async def daily_money(ctx: commands.Context):
    """R√©cup√®re la r√©compense quotidienne."""
    DAILY_AMOUNT = 500
    
    data_manager.update_balance(ctx.author.id, DAILY_AMOUNT)
    data_manager.set_last_daily(ctx.author.id)
    
    balance = data_manager.get_balance(ctx.author.id)
    emoji = "‚≠ê"
    
    embed = discord.Embed(
        title="üéÅ R√©compense Quotidienne !",
        description=f"üéâ Vous avez gagn√© **{DAILY_AMOUNT} {emoji}** !\nVotre nouveau solde est de **{balance} {emoji}**.",
        color=discord.Color.yellow()
    )
    await ctx.send(embed=embed)

@daily_money.error
async def daily_money_error(ctx: commands.Context, error: commands.CommandError):
    if isinstance(error, commands.CommandOnCooldown):
        remaining = error.retry_after
        hours = int(remaining // 3600)
        minutes = int((remaining % 3600) // 60)
        seconds = int(remaining % 60)
        
        await ctx.send(f"‚è≥ Vous avez d√©j√† r√©cup√©r√© votre r√©compense quotidienne. Revenez dans **{hours}h {minutes}m {seconds}s**.", ephemeral=True)
    else:
        await on_command_error(ctx, error) # Renvoie √† la gestion d'erreur globale


@bot.command(name='work')
@commands.cooldown(1, 14400, commands.BucketType.user) # 14400 secondes = 4 heures
async def work_command(ctx: commands.Context):
    """Permet aux membres de "travailler" pour gagner de l'argent."""
    
    WORK_MIN = 150
    WORK_MAX = 450
    gain = random.randint(WORK_MIN, WORK_MAX)
    emoji = "‚≠ê"
    
    jobs = [
        f"Vous avez cod√© une fonctionnalit√© complexe pour {gain} {emoji}.",
        f"Vous avez tri√© les donn√©es du serveur pour {gain} {emoji}.",
        f"Vous avez livr√© des pizzas spatiales pour un gain de {gain} {emoji}.",
        f"Vous avez aid√© un admin √† d√©boguer un script et avez gagn√© {gain} {emoji}.",
        f"Vous avez organis√© la biblioth√®que du serveur et re√ßu {gain} {emoji}."
    ]
    job_message = random.choice(jobs)

    data_manager.update_balance(ctx.author.id, gain)
    data_manager.set_last_work(ctx.author.id) 
    
    balance = data_manager.get_balance(ctx.author.id)
    
    embed = discord.Embed(
        title="üíº Travail Accompli !",
        description=f"{job_message}\n\nVotre nouveau solde est de **{balance} {emoji}**.",
        color=discord.Color.blue()
    )
    await ctx.send(embed=embed)

@work_command.error
async def work_command_error(ctx: commands.Context, error: commands.CommandError):
    if isinstance(error, commands.CommandOnCooldown):
        remaining = error.retry_after
        hours = int(remaining // 3600)
        minutes = int((remaining % 3600) // 60)
        
        await ctx.send(f"‚è≥ Vous √™tes fatigu√©. Revenez au travail dans **{hours}h {minutes}m**.", ephemeral=True)
    else:
        await on_command_error(ctx, error)

@bot.command(name='addmoney')
@commands.has_permissions(administrator=True)
async def add_money(ctx: commands.Context, member: discord.Member, amount: int):
    """Ajoute de la monnaie √† un membre."""
    if amount <= 0: return await ctx.send("‚ùå Le montant doit √™tre positif.")
    
    new_balance = data_manager.update_balance(member.id, amount)
    emoji = "‚≠ê"
    
    embed = discord.Embed(
        title="‚ûï Monnaie Ajout√©e",
        description=f"**{amount} {emoji}** ont √©t√© ajout√©s √† {member.mention} par {ctx.author.mention}.",
        color=discord.Color.green()
    )
    embed.set_footer(text=f"Nouveau solde : {new_balance} {emoji}")
    await ctx.send(embed=embed)

@bot.command(name='setmoney')
@commands.has_permissions(administrator=True)
async def set_money(ctx: commands.Context, member: discord.Member, amount: int):
    """D√©finit la monnaie d'un membre √† un montant pr√©cis."""
    if amount < 0: return await ctx.send("‚ùå Le montant ne peut pas √™tre n√©gatif (utilisez 0 pour r√©initialiser).")
    
    old_balance = data_manager.get_balance(member.id)
    new_balance = data_manager.set_balance(member.id, amount)
    emoji = "‚≠ê"
    
    embed = discord.Embed(
        title="‚úèÔ∏è Solde Modifi√©",
        description=f"Le solde de {member.mention} a √©t√© d√©fini √† **{amount} {emoji}** par {ctx.author.mention}.",
        color=discord.Color.blue()
    )
    embed.add_field(name="Ancien Solde", value=f"{old_balance} {emoji}", inline=True)
    embed.add_field(name="Nouveau Solde", value=f"{new_balance} {emoji}", inline=True)
    await ctx.send(embed=embed)



@bot.command(name='rank', aliases=['niveau'])
async def show_rank(ctx: commands.Context, member: discord.Member = None):
    """Affiche le niveau et l'exp√©rience d'un membre."""
    member = member or ctx.author
    level, current_xp = data_manager.get_level_info(member.id)
    
    xp_required_next = data_manager.required_xp(level + 1)
    
    progress_percent = (current_xp / xp_required_next) * 100 if xp_required_next > 0 else 100
    
    bar_length = 15
    filled_blocks = math.floor(progress_percent / (100 / bar_length))
    empty_blocks = bar_length - filled_blocks
    progress_bar = "üü¶" * filled_blocks + "‚¨ú" * empty_blocks
    
    embed = discord.Embed(
        title=f"üìà Profil de Niveau de {member.display_name}",
        color=discord.Color.purple()
    )
    embed.set_thumbnail(url=member.display_avatar.url)
    embed.add_field(name="Niveau Actuel", value=f"**{level}**", inline=True)
    embed.add_field(name="XP Actuelle", value=f"**{current_xp} XP**", inline=True)
    embed.add_field(name="XP Prochain Niveau", value=f"**{xp_required_next} XP**", inline=True)
    
    embed.add_field(
        name=f"Progression ({current_xp}/{xp_required_next} XP)",
        value=f"{progress_bar} **{progress_percent:.2f}%**",
        inline=False
    )
    
    await ctx.send(embed=embed)

@bot.command(name='leaderboard', aliases=['lb', 'top'])
async def show_leaderboard(ctx: commands.Context):
    """Affiche le classement des membres les plus actifs."""
    all_levels = data_manager.get_all_levels()
    
    sorted_users = sorted(all_levels, key=lambda x: (x[1], x[2]), reverse=True)
    
    top_10 = sorted_users[:10]
    
    if not top_10:
        return await ctx.send("‚ùå Aucun utilisateur n'a encore d'XP.")

    leaderboard_text = ""
    rank = 1
    
    for user_id_str, level, xp in top_10:
        member = ctx.guild.get_member(int(user_id_str))
        
        if member:
            display_name = member.display_name
        else:
            try:
                user = await bot.fetch_user(int(user_id_str))
                display_name = user.name + " (Quitt√©)"
            except:
                display_name = f"Utilisateur Inconnu ({user_id_str})"
            
        leaderboard_text += f"`#{rank}` **{display_name}** ‚Äî **Niveau {level}** ({xp} XP)\n"
        rank += 1
        
    embed = discord.Embed(
        title="üèÜ Classement des Niveaux (Top 10)",
        description=leaderboard_text,
        color=discord.Color.gold(),
        timestamp=datetime.now()
    )
    
    author_id_str = str(ctx.author.id)
    author_rank = next(((i + 1) for i, (uid, _, _) in enumerate(sorted_users) if uid == author_id_str), "N/A")
    
    embed.set_footer(text=f"Votre classement : #{author_rank}")
    await ctx.send(embed=embed)



active_giveaways = [] 

@tasks.loop(seconds=5) 
async def giveaway_task():
    """T√¢che d'arri√®re-plan pour v√©rifier et terminer les giveaways."""
    global active_giveaways
    now = datetime.now()
    
    for giveaway in active_giveaways[:]:
        end_time = giveaway['end_time']
        if now >= end_time:
            active_giveaways.remove(giveaway)
            await end_giveaway(giveaway)
            
async def end_giveaway(giveaway):
    """Effectue le tirage au sort et annonce le gagnant."""
    channel = bot.get_channel(giveaway['channel_id'])
    
    try:
        message = await channel.fetch_message(giveaway['message_id'])
    except:
        return

    reaction = discord.utils.get(message.reactions, emoji='üéÅ')
    
    if reaction:
        users = [user async for user in reaction.users() if not user.bot]
        
        if not users:
            embed = discord.Embed(title="‚ùå Cadeau Termin√©", description="Aucun participant valide pour le tirage au sort.", color=discord.Color.red())
            await channel.send(embed=embed)
            return
            
        num_winners = giveaway['winners']
        winners = random.sample(users, min(num_winners, len(users)))
        
        winner_mentions = ", ".join([w.mention for w in winners])
        
        embed = discord.Embed(
            title=f"üéâ CADEAU TERMIN√â : {giveaway['prize']}",
            description=f"F√©licitations au(x) gagnant(s) : {winner_mentions} !",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        embed.set_footer(text=f"Gagnant(s): {num_winners} | Organis√© par {giveaway['host_name']}")
        
        await message.edit(embed=embed)
        await channel.send(f"üéâ **F√©licitations** {winner_mentions} ! Vous avez gagn√© **{giveaway['prize']}** !")
        
    else:
        embed = discord.Embed(title="‚ùå Cadeau Termin√©", description="Aucun participant valide (probl√®me de r√©action du bot).", color=discord.Color.red())
        await channel.send(embed=embed)


@bot.command(name='gstart', aliases=['giveaway', 'startgiveaway'])
@commands.has_permissions(administrator=True)
async def start_giveaway(ctx: commands.Context, duration: str, winners: int, *, prize: str):
    """D√©marre un cadeau (giveaway). Format: +gstart 1h 1 Prix du cadeau"""
    try:
        time_unit = duration[-1]
        time_val = int(duration[:-1])
        
        if time_unit == 's': delta = timedelta(seconds=time_val)
        elif time_unit == 'm': delta = timedelta(minutes=time_val)
        elif time_unit == 'h': delta = timedelta(hours=time_val)
        elif time_unit == 'd': delta = timedelta(days=time_val)
        else: raise ValueError
            
        if delta.total_seconds() < 10 or delta.total_seconds() > 604800: # Max 7 jours
            return await ctx.send("‚ùå Dur√©e invalide. Utilisez 's', 'm', 'h' ou 'd' (min 10s, max 7j).")
            
    except:
        return await ctx.send("‚ùå Format de dur√©e invalide. Exemples : `1h`, `30m`, `5s`. Utilisez : `+gstart <dur√©e> <gagnants> <prix>`")

    end_time = datetime.now() + delta
    
    embed = discord.Embed(
        title=f"üéâ CADEAU : {prize}",
        description=f"R√©agissez avec üéÅ pour participer !\n\nOrganisateur : {ctx.author.mention}\n\n**Gagnant(s) :** {winners}\n**Termine :** {discord.utils.format_dt(end_time, 'R')}",
        color=discord.Color.dark_magenta(),
        timestamp=end_time
    )
    embed.set_footer(text="Cliquez sur üéÅ pour participer")
    
    giveaway_message = await ctx.send(embed=embed)
    await giveaway_message.add_reaction('üéÅ')
    await ctx.message.delete()
    
    active_giveaways.append({
        'message_id': giveaway_message.id,
        'channel_id': ctx.channel.id,
        'end_time': end_time,
        'winners': winners,
        'prize': prize,
        'host_name': ctx.author.display_name
    })


@bot.command(name='hug')
async def hug_member(ctx: commands.Context, member: discord.Member = None):
    """Fait un c√¢lin √† un membre ou √† soi-m√™me."""
    
    HUG_GIFS = [
        "https://media.giphy.com/media/GMFURg5r4QJ8X8TjYJ/giphy.gif",
        "https://media.giphy.com/media/V8YgR6yWwJ2k3K3u7d/giphy.gif",
        "https://media.giphy.com/media/Y4yR144L0R8nO/giphy.gif",
        "https://media.giphy.com/media/V8YgR6yWwJ2k3K3u7d/giphy.gif",
        "https://media.giphy.com/media/MDJ9IbxxvFEjEw6V1S/giphy.gif"
    ]
    
    gif_url = random.choice(HUG_GIFS)
    
    if member is None:
        message = f"ü´Ç **{ctx.author.display_name}** se fait un √©norme c√¢lin √† lui-m√™me ! Vous le m√©ritez."
    elif member == ctx.author:
        message = f"ü´Ç **{ctx.author.display_name}** se fait un √©norme c√¢lin √† lui-m√™me ! Vous le m√©ritez."
    elif member.bot:
        message = f"ü§ñ **{ctx.author.display_name}** essaie de faire un c√¢lin √† un bot... C'est mignon !"
    else:
        message = f"üíñ **{ctx.author.display_name}** fait un gros c√¢lin √† **{member.display_name}** !"
        
    embed = discord.Embed(
        description=message,
        color=discord.Color.red()
    )
    embed.set_image(url=gif_url)
    
    await ctx.send(embed=embed)

@bot.command(name='meme')
async def get_meme(ctx: commands.Context):
    """R√©cup√®re un m√®me al√©atoire. (Simul√© par une recherche)"""
    
    await ctx.send("‚è≥ Recherche d'un m√®me sur Internet...")
    
    
        
    meme_subjects = ["funny programming meme", "spongebob meme", "classic internet meme", "cat meme"]
    query = random.choice(meme_subjects)
    
    try:
        search_result = await google_search(query=f"image {query}")
        
        
        if search_result and search_result[0].get('image'):
            image_url = search_result[0]['image']['url']
            title = f"üòÇ M√®me : {query.replace('image', '').strip().title()}"
        elif search_result and search_result[0].get('url'):
            image_url = "https://i.imgur.com/k3qA04l.png" # Image par d√©faut si l'API est complexe
            title = f"üòÇ M√®me trouv√© (lien de page) : {query.replace('image', '').strip().title()}"
        else:
            raise Exception("No direct image link found.")

    except Exception:
        image_url = "https://i.imgur.com/gD68k80.png" # Image de secours
        title = "‚ùå Erreur de M√®me (Image par d√©faut)"
        
    embed = discord.Embed(
        title=title,
        description="Voici un m√®me al√©atoire !",
        color=discord.Color.teal()
    )
    embed.set_image(url=image_url)
    await ctx.send(embed=embed)



@bot.command(name='ping')
async def ping(ctx: commands.Context):
    """Affiche la latence du bot."""
    await ctx.send(f'üèì Pong! Latence: **{round(bot.latency * 1000)}ms**')

@bot.command(name='avatar', aliases=['pfp', 'pp'])
async def avatar(ctx: commands.Context, member: discord.Member = None):
    """Affiche l'avatar du membre mentionn√© ou de l'auteur."""
    member = member or ctx.author
    embed = discord.Embed(
        title=f"üñºÔ∏è Avatar de {member.display_name}",
        color=member.color if member.color != discord.Color.default() else discord.Color.blue()
    )
    embed.set_image(url=member.display_avatar.url)
    embed.set_footer(text=f"Demand√© par {ctx.author.display_name}")
    await ctx.send(embed=embed)

@bot.command(name='userinfo', aliases=['ui'])
async def user_info(ctx: commands.Context, member: discord.Member = None):
    """Affiche les informations sur l'utilisateur."""
    member = member or ctx.author
    
    roles = [role.mention for role in member.roles if role.name != "@everyone"]
    if not roles:
        roles_value = "Aucun r√¥le sp√©cifique."
    else:
        roles_value = ", ".join(roles[:10])
        if len(roles) > 10:
            roles_value += f", et {len(roles) - 10} de plus..."
            
    embed = discord.Embed(
        title=f"üë§ Informations sur {member.display_name}",
        color=member.color if member.color != discord.Color.default() else discord.Color.dark_grey(),
        timestamp=datetime.now()
    )
    
    embed.set_thumbnail(url=member.display_avatar.url)
    embed.add_field(name="ID", value=member.id, inline=False)
    embed.add_field(name="Nom d'utilisateur", value=member.name, inline=True)
    embed.add_field(name="Surnom (serveur)", value=member.nick or "Aucun", inline=True)
    embed.add_field(name="Compte cr√©√© le", value=member.created_at.strftime("%d/%m/%Y √† %H:%M"), inline=False)
    embed.add_field(name="A rejoint le", value=member.joined_at.strftime("%d/%m/%Y √† %H:%M") if member.joined_at else "Inconnu", inline=False)
    embed.add_field(name=f"R√¥les ({len(roles)})", value=roles_value, inline=False)
    
    await ctx.send(embed=embed)
    
@bot.command(name='serverinfo', aliases=['si'])
async def server_info(ctx: commands.Context):
    """Affiche les informations sur le serveur."""
    guild = ctx.guild
    embed = discord.Embed(
        title=f"üìä Informations sur le Serveur {guild.name}",
        color=discord.Color.blue(),
        timestamp=datetime.now()
    )
    
    embed.set_thumbnail(url=guild.icon.url if guild.icon else None)
    embed.add_field(name="ID du Serveur", value=guild.id, inline=False)
    embed.add_field(name="Propri√©taire", value=guild.owner.mention, inline=True)
    embed.add_field(name="R√©gion", value=str(guild.preferred_locale), inline=True)
    embed.add_field(name="Membres", value=guild.member_count, inline=True)
    embed.add_field(name="Canaux Texte", value=len(guild.text_channels), inline=True)
    embed.add_field(name="Canaux Vocaux", value=len(guild.voice_channels), inline=True)
    embed.add_field(name="R√¥les", value=len(guild.roles), inline=True)
    embed.add_field(name="Niveau Boost", value=f"Niveau {guild.premium_tier} ({guild.premium_subscription_count} boosts)", inline=True)
    embed.add_field(name="Cr√©√© le", value=guild.created_at.strftime("%d/%m/%Y"), inline=False)
    
    await ctx.send(embed=embed)

@bot.command(name='coin', aliases=['flip'])
async def coin_flip(ctx: commands.Context):
    """Lance une pi√®ce √† pile ou face."""
    result = random.choice(["Pile (Tails)", "Face (Heads)"])
    await ctx.send(f"üëë **{ctx.author.display_name}** a lanc√© une pi√®ce. R√©sultat : **{result}**")


@bot.command(name='dice', aliases=['d√©', 'roll'])
async def roll_dice(ctx, faces: int = 6):
    """Lance un d√© avec le nombre de faces sp√©cifi√© (max 100)."""
    if faces < 2 or faces > 100:
        return await ctx.send("‚ùå Veuillez sp√©cifier un nombre de faces entre 2 et 100.")

    result = random.randint(1, faces)
    await ctx.send(f"üé≤ **{ctx.author.display_name}** a lanc√© un d√© √† {faces} faces. R√©sultat : **{result}**")

@bot.command(name='8ball')
async def eight_ball(ctx, *, question: str):
    """R√©pond √† une question par un oui, un non, ou une r√©ponse vague."""
    responses = [
        "Oui, absolument.", "C'est certain.", "Sans aucun doute.", "Tr√®s probablement.",
        "Oui.", "Les signes pointent vers le oui.", "La r√©ponse est non.",
        "Non.", "N'y compte pas.", "Mes sources disent non.",
        "Je ne suis pas s√ªr. Essaie plus tard.", "Mieux vaut ne pas te le dire maintenant.", "Concentrez-vous et redemandez.",
    ]
    embed = discord.Embed(
        title="üé± Magic 8 Ball",
        description=f"**Question :** {question}\n\n**R√©ponse :** {random.choice(responses)}",
        color=discord.Color.dark_purple()
    )
    await ctx.send(embed=embed)
    
@bot.command(name='roleinfo', aliases=['ri'])
async def role_info(ctx, role: discord.Role):
    """Affiche les informations d'un r√¥le."""
    members_with_role = len(role.members)
    
    embed = discord.Embed(
        title=f"üè∑Ô∏è Informations sur le r√¥le {role.name}",
        color=role.color if role.color != discord.Color.default() else discord.Color.greyple(),
        timestamp=datetime.now()
    )
    embed.add_field(name="ID", value=role.id, inline=False)
    embed.add_field(name="Couleur", value=str(role.color), inline=True)
    embed.add_field(name="Membres", value=members_with_role, inline=True)
    embed.add_field(name="Position", value=f"#{role.position}", inline=True)
    embed.add_field(name="Cr√©√© le", value=role.created_at.strftime("%d/%m/%Y"), inline=True)
    embed.add_field(name="Mentionnable", value="‚úÖ Oui" if role.mentionable else "‚ùå Non", inline=True)
    
    await ctx.send(embed=embed)


@bot.command(name='traduction', aliases=['translate'])
async def translate_text(ctx: commands.Context, target_lang: str, *, text: str):
    """Traduit un texte donn√© vers une langue cible. (+traduction fr Hello)"""
    
    target_lang = target_lang.lower()
    
    LANG_MAP = {
        "fr": "Fran√ßais", "en": "Anglais", "es": "Espagnol", "de": "Allemand", "it": "Italien"
    }
    
    if target_lang not in LANG_MAP:
        return await ctx.send(f"‚ùå Langue cible non support√©e ou format invalide. Exemples : `fr`, `en`, `es`.")

    await ctx.send("‚è≥ Traduction en cours...")
    
    
    query = f"traduire '{text}' en {LANG_MAP[target_lang]}"
    
    try:
        search_result = await google_search(query=query)
        
        translated_text = "D√©sol√©, la traduction n'a pas pu √™tre extraite."
        if search_result and search_result[0].get('snippet'):
            snippet = search_result[0]['snippet'].strip()
            translated_text = snippet if len(snippet) < 500 else snippet[:500] + "..." 
            
    except Exception:
        translated_text = "Erreur de connexion √† l'outil de traduction simul√©."
        
    embed = discord.Embed(
        title=f"üåê Traduction vers le {LANG_MAP[target_lang]}",
        color=discord.Color.dark_green()
    )
    embed.add_field(name="Texte Original", value=f"```\n{text}\n```", inline=False)
    embed.add_field(name="Texte Traduit", value=f"```\n{translated_text}\n```", inline=False)
    
    await ctx.send(embed=embed)


@bot.command(name='say')
@commands.has_permissions(manage_messages=True)
async def say_message(ctx, channel: discord.TextChannel, *, message: str):
    """Fait parler le bot dans le salon sp√©cifi√© et supprime le message de commande."""
    try:
        await channel.send(message)
        await ctx.message.delete()
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas la permission d'envoyer un message dans ce salon.")
    except Exception as e:
        await ctx.send(f"‚ùå Erreur lors de l'envoi du message : {e}")

@bot.command(name='embed')
@commands.has_permissions(administrator=True)
async def create_embed(ctx, channel: discord.TextChannel, *, content: str):
    """Cr√©e et envoie un embed simple dans un salon. Format: Titre | Description"""
    
    if '|' not in content:
        return await ctx.send("‚ùå Format invalide. Utilisez : `+embed #salon Titre | Description`")
    
    try:
        title, description = content.split('|', 1)
    except ValueError:
        return await ctx.send("‚ùå Veuillez fournir √† la fois un titre et une description s√©par√©s par `|`.")

    embed = discord.Embed(
        title=title.strip(),
        description=description.strip(),
        color=discord.Color.blue(),
        timestamp=datetime.now()
    )
    
    await channel.send(embed=embed)
    await ctx.message.delete()



@bot.command(name='help', aliases=['aide', 'h'])
async def help_command(ctx: commands.Context):
    """Affiche la liste des commandes et leur description."""
    embed = discord.Embed(
        title="üåü Commandes du Bot Hoshikuzu üåü",
        description="Liste compl√®te des commandes disponibles.",
        color=discord.Color.from_rgb(255, 192, 203), # Rose p√¢le
        timestamp=datetime.now()
    )

    embed.add_field(
        name="‚öôÔ∏è Configuration (Admin)",
        value="""
        `+config` - Affiche la configuration actuelle
        `+setlogs #salon` - Salon pour la journalisation
        `+setboostchannel #salon` - Salon des remerciements de boost ‚ú®
        `+setticketcategory #cat√©gorie` - Cat√©gorie des tickets
        `+setticketrole @r√¥le` - R√¥le support pour les tickets
        `+sendticketpanel #salon` - Envoie le bouton de ticket
        `+sendrules #salon` - Envoie l'embed des r√®gles üìú
        `+sendrolespanel #salon` - Envoie le panneau de R√¥les par R√©action üí´
        `+welcomeembed #salon` - Salon de bienvenue (embed)
        `+welcomesimple #salon` - Salon de bienvenue (simple)
        `+leavechat #salon` - Salon des d√©parts
        """,
        inline=False
    )

    embed.add_field(
        name="üëÆ Mod√©ration (Admin/Staff)",
        value="""
        `+ban @membre [raison]` - Bannit un membre üî®
        `+kick @membre [raison]` - Expulse un membre üë¢
        `+mute @membre [dur√©e en min]` - Met un membre en timeout üîá
        `+unmute @membre` - Retire le timeout üîä
        `+clear [nombre]` - Supprime des messages üßπ
        `+close` - Ferme le ticket actuel
        `+add @membre` - Ajoute un membre au ticket
        `+say #salon [message]` - Fait parler le bot
        `+embed #salon [Titre | Description]` - Envoie un embed
        `+warn @membre [raison]` - Donne un avertissement üö®
        `+warnings @membre` - Affiche les avertissements üìã
        `+delwarn @membre [ID]` - Supprime un avertissement
        """,
        inline=False
    )
    
    embed.add_field(
        name="üìà Niveaux (Leveling)",
        value="""
        `+rank [@membre]` - Affiche le niveau et l'XP üìä
        `+leaderboard` - Affiche le classement des niveaux üèÜ
        """,
        inline=False
    )

    embed.add_field(
        name="üí∞ √âconomie & Cadeaux",
        value="""
        `+balance [@membre]` - Affiche le solde ‚≠ê
        `+daily` - R√©compense quotidienne üéÅ
        `+work` - Permet de travailler pour de l'argent üíº
        `+gstart <dur√©e> <gagnants> <prix>` - D√©marre un cadeau üéâ
        `+addmoney @membre [montant]` - Ajoute de la monnaie (Admin)
        `+setmoney @membre [montant]` - D√©finit le solde (Admin)
        """,
        inline=False
    )

    embed.add_field(
        name="üòÇ Fun & Interaction",
        value="""
        `+hug [@membre]` - Fait un gros c√¢lin üíñ
        `+meme` - Affiche un m√®me al√©atoire üòÇ
        `+coin` - Lance une pi√®ce üëë
        `+dice [faces]` - Lance un d√© üé≤
        `+8ball [question]` - Pose une question üîÆ
        """,
        inline=False
    )
    
    embed.add_field(
        name="üõ†Ô∏è Utilitaires",
        value="""
        `+ping` - Affiche la latence du bot üèì
        `+traduction <langue> <texte>` - Traduit un texte üåê
        `+avatar [@membre]` - Affiche l'avatar
        `+userinfo [@membre]` - Infos du membre üë§
        `+serverinfo` - Infos du serveur üìä
        `+roleinfo @r√¥le` - Infos d'un r√¥le üè∑Ô∏è
        """,
        inline=False
    )
    
    embed.set_footer(text=f"Demand√© par {ctx.author.display_name}")
    await ctx.send(embed=embed)






if __name__ == "__main__":
    TOKEN = os.environ.get('DISCORD_BOT_TOKEN')
    
    if not TOKEN:
        print("‚ùå Erreur: La variable d'environnement 'DISCORD_BOT_TOKEN' n'est pas d√©finie.")
    else:
        threading.Thread(target=keep_alive, daemon=True).start()

        try:
            bot.run(TOKEN) # OU asyncio.run(main())
        except Exception as e:
            print(f"‚ùå Erreur inattendue avant le lancement du serveur : {e}")


import threading, http.server, socketserver, os

def keep_alive():
    """
    Ouvre un petit serveur HTTP sur le port requis par Render pour √©viter l'arr√™t automatique.
    """
    port = int(os.environ.get("PORT", 8080))
    handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", port), handler) as httpd:
        print(f"‚úÖ Serveur keep-alive lanc√© sur le port {port}")
        httpd.serve_forever()

if not os.getenv("DISCORD_BOT_TOKEN"):
    print("‚ùå Erreur: La variable d'environnement 'DISCORD_BOT_TOKEN' n'est pas d√©finie.")
else:
    TOKEN = os.getenv("DISCORD_BOT_TOKEN")

    threading.Thread(target=keep_alive, daemon=True).start()

    try:
        bot.run(TOKEN)
    except discord.HTTPException as e:
        if e.status == 429:
            print("‚ùå Erreur : Trop de requ√™tes (Rate Limit). Attends avant de relancer.")
        else:
            raise e
    except KeyboardInterrupt:
        print("üõë Bot arr√™t√© manuellement.")

@bot.event
async def on_voice_state_update(member, before, after):
    """Cr√©e automatiquement un salon vocal temporaire quand un membre rejoint 'Cr√©er un vocal'."""
    try:
        if after.channel and after.channel.name.lower() == "cr√©er un vocal":
            category = after.channel.category
            guild = after.channel.guild

            # Cr√©er un salon vocal temporaire
            new_vc = await guild.create_voice_channel(
                name=f"üé§ Salon de {member.display_name}",
                category=category,
                reason="Salon vocal temporaire cr√©√© automatiquement"
            )

            # D√©placer le membre dans le nouveau salon
            await member.move_to(new_vc)
            print(f"üé§ Salon temporaire cr√©√© : {new_vc.name} pour {member.display_name}")

            # Supprimer automatiquement le salon quand il devient vide
            async def check_empty():
                await asyncio.sleep(10)
                while True:
                    if len(new_vc.members) == 0:
                        await new_vc.delete(reason="Salon temporaire vide - suppression automatique")
                        print(f"üóëÔ∏è Salon temporaire supprim√© : {new_vc.name}")
                        break
                    await asyncio.sleep(10)

            bot.loop.create_task(check_empty())

    except Exception as e:
        print(f"‚ùå Erreur syst√®me voc: {e}")

# === AJOUT S√õR : auto-role config, createvoc, lock/unlock, auto-temp-voice, help stylis√© ===
import json, os, asyncio
from discord.ext import commands

CONFIG_FILE = "data/config.json"

def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except:
                return {}
    return {}

def save_config(cfg):
    os.makedirs("data", exist_ok=True)
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(cfg, f, indent=4)

_config = load_config()

# register aurole if not already registered
if "aurole" not in bot.all_commands:
    @bot.command(name="aurole")
    @commands.has_permissions(manage_roles=True)
    async def set_auto_role(ctx, role: discord.Role):
        _config["auto_role_id"] = role.id
        save_config(_config)
        await ctx.send(f"‚úÖ Le r√¥le automatique a √©t√© d√©fini sur {role.mention}")

# add auto-role listener (uses add_listener so it doesn't override existing handlers)
async def _auto_role_on_join(member: discord.Member):
    try:
        auto_role_id = _config.get("auto_role_id")
        if auto_role_id:
            role = member.guild.get_role(auto_role_id)
            if role:
                await member.add_roles(role)
                print(f"‚úÖ R√¥le automatique '{role.name}' attribu√© √† {member.name}")
    except Exception as e:
        print(f"‚ùå Erreur attribution auto-r√¥le : {e}")

# ensure we don't register twice
if "_auto_role_on_join" not in [h.__name__ for h in bot.listeners.get('on_member_join', [])]:
    bot.add_listener(_auto_role_on_join, 'on_member_join')

# createvoc command
if "createvoc" not in bot.all_commands:
    @bot.command(name="createvoc")
    @commands.has_permissions(manage_channels=True)
    async def createvoc(ctx):
        guild = ctx.guild
        category = None
        for cat in guild.categories:
            if "vocal" in cat.name.lower() or "voice" in cat.name.lower():
                category = cat
                break

        existing = discord.utils.get(guild.voice_channels, name="Cr√©er un vocal")
        if existing:
            await ctx.send("üîä Le salon 'Cr√©er un vocal' existe d√©j√†.")
            return

        new_channel = await guild.create_voice_channel("Cr√©er un vocal", category=category)
        await ctx.send(f"‚úÖ Salon vocal **{new_channel.name}** cr√©√© avec succ√®s !")
        print(f"Salon 'Cr√©er un vocal' cr√©√© dans {guild.name}")

# lock/unlock commands
if "lock" not in bot.all_commands:
    @bot.command(name="lock")
    @commands.has_permissions(manage_channels=True)
    async def lock(ctx, target: str = None):
        if target == "vocal":
            if ctx.author.voice and ctx.author.voice.channel:
                channel = ctx.author.voice.channel
                overwrite = channel.overwrites_for(ctx.guild.default_role)
                overwrite.connect = False
                await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
                await ctx.send(f"üîí Salon vocal **{channel.name}** verrouill√©.")
            else:
                await ctx.send("‚ùå Tu dois √™tre dans un salon vocal pour le verrouiller.")
        else:
            channel = ctx.channel
            overwrite = channel.overwrites_for(ctx.guild.default_role)
            overwrite.send_messages = False
            await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
            await ctx.send(f"üîí Salon texte **{channel.name}** verrouill√©.")

if "unlock" not in bot.all_commands:
    @bot.command(name="unlock")
    @commands.has_permissions(manage_channels=True)
    async def unlock(ctx, target: str = None):
        if target == "vocal":
            if ctx.author.voice and ctx.author.voice.channel:
                channel = ctx.author.voice.channel
                overwrite = channel.overwrites_for(ctx.guild.default_role)
                overwrite.connect = True
                await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
                await ctx.send(f"üîì Salon vocal **{channel.name}** d√©verrouill√©.")
            else:
                await ctx.send("‚ùå Tu dois √™tre dans un salon vocal pour le d√©verrouiller.")
        else:
            channel = ctx.channel
            overwrite = channel.overwrites_for(ctx.guild.default_role)
            overwrite.send_messages = True
            await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
            await ctx.send(f"üîì Salon texte **{channel.name}** d√©verrouill√©.")

# auto temporary voice channels listener
async def _auto_temp_vc(member, before, after):
    try:
        if after and after.channel and after.channel.name and after.channel.name.lower() == "cr√©er un vocal":
            guild = member.guild
            category = after.channel.category
            channel_name = f"üé§ Salon de {member.display_name}"
            new_vc = await guild.create_voice_channel(
                name=channel_name,
                category=category,
                reason="Salon vocal temporaire cr√©√© automatiquement"
            )

            try:
                await member.move_to(new_vc)
            except Exception as e:
                print(f"‚ö†Ô∏è Impossible de d√©placer {member.display_name} vers {new_vc.name}: {e}")

            print(f"üé§ Salon temporaire cr√©√© : {new_vc.name} pour {member.display_name}")

            async def monitor_and_delete(vc_id, guild_id):
                await asyncio.sleep(8)
                g = bot.get_guild(guild_id)
                while True:
                    ch = g.get_channel(vc_id) if g else None
                    if ch is None:
                        break
                    if len(ch.members) == 0:
                        try:
                            await ch.delete(reason="Salon temporaire vide - suppression automatique")
                            print(f"üóëÔ∏è Salon temporaire supprim√© : {vc_id}")
                        except Exception as e:
                            print(f"Erreur suppression salon temporaire: {e}")
                        break
                    await asyncio.sleep(8)

            bot.loop.create_task(monitor_and_delete(new_vc.id, guild.id))
    except Exception as e:
        print(f"‚ùå Erreur syst√®me voc: {e}")

# ensure listener not registered twice
if "_auto_temp_vc" not in [h.__name__ for h in bot.listeners.get('on_voice_state_update', [])]:
    bot.add_listener(_auto_temp_vc, 'on_voice_state_update')

# replace help command with stylized version
try:
    bot.remove_command("help")
except Exception:
    pass

@bot.command(name="help")
async def help_command(ctx):
    embed = discord.Embed(
        title="üåå Aide ‚Äî Commandes de Hoshikuzu",
        description="Voici toutes les commandes disponibles ‚ú®",
        color=discord.Color.purple()
    )

    embed.add_field(
        name="‚öôÔ∏è Configuration",
        value="`+aurole @r√¥le` ‚Äî D√©finit le r√¥le attribu√© automatiquement aux nouveaux membres\n"
              "`+help` ‚Äî Affiche ce message d‚Äôaide",
        inline=False
    )

    embed.add_field(
        name="üîä Vocaux",
        value="`+createvoc` ‚Äî Cr√©e le salon sp√©cial **Cr√©er un vocal** (pour vocaux temporaires)\n"
              "`+lock [vocal]` ‚Äî Verrouille un salon texte ou vocal\n"
              "`+unlock [vocal]` ‚Äî D√©verrouille un salon texte ou vocal",
        inline=False
    )

    embed.add_field(
        name="üéß Automatique",
        value="ü™Ñ Quand quelqu‚Äôun rejoint **Cr√©er un vocal**, un salon temporaire est cr√©√© automatiquement et supprim√© lorsqu‚Äôil est vide.\n"
              "üßç Les nouveaux membres re√ßoivent automatiquement le r√¥le d√©fini avec `+aurole`.",
        inline=False
    )

    embed.set_footer(text="‚ú® Hoshikuzu ‚Äî by your starry bot üåô")
    await ctx.send(embed=embed)

# end addon


# ======== AJOUTS GPT (NE RIEN SUPPRIMER AU-DESSUS) ========
import asyncio, json, os
from discord.ext import commands

# Configuration file for auto-role
_GPT_CONFIG_FILE = "data/gpt_config.json"

def _gpt_load_config():
    if os.path.exists(_GPT_CONFIG_FILE):
        with open(_GPT_CONFIG_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except:
                return {}
    return {}

def _gpt_save_config(cfg):
    os.makedirs("data", exist_ok=True)
    with open(_GPT_CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(cfg, f, indent=4)

_gpt_config = _gpt_load_config()

# Safe registration helpers to avoid duplicate commands/listeners
def _register_command_if_missing(name):
    return name not in getattr(bot, "all_commands", {})

# +aurole: set automatic role for newcomers
if _register_command_if_missing("aurole"):
    @bot.command(name="aurole")
    @commands.has_permissions(manage_roles=True)
    async def _gpt_set_auto_role(ctx, role: discord.Role):
        _gpt_config["auto_role_id"] = role.id
        _gpt_save_config(_gpt_config)
        await ctx.send(f"‚úÖ Le r√¥le automatique a √©t√© d√©fini sur {role.mention}")

# Auto-assign role on join (listener added safely)
async def _gpt_auto_role_on_join(member: discord.Member):
    try:
        auto_role_id = _gpt_config.get("auto_role_id")
        if auto_role_id:
            role = member.guild.get_role(auto_role_id)
            if role:
                await member.add_roles(role)
                print(f"‚úÖ R√¥le automatique '{role.name}' attribu√© √† {member.name}")
    except Exception as e:
        print(f"‚ùå Erreur attribution auto-r√¥le : {e}")

# add listener if not already present
_existing = [h.__name__ for h in bot.listeners.get('on_member_join', [])] if getattr(bot, "listeners", None) else []
if "_gpt_auto_role_on_join" not in _existing:
    bot.add_listener(_gpt_auto_role_on_join, 'on_member_join')

# +createvoc: create the trigger voice channel "Cr√©er un vocal"
if _register_command_if_missing("createvoc"):
    @bot.command(name="createvoc")
    @commands.has_permissions(manage_channels=True)
    async def _gpt_createvoc(ctx):
        guild = ctx.guild
        category = None
        for cat in guild.categories:
            if "vocal" in cat.name.lower() or "voice" in cat.name.lower():
                category = cat
                break

        existing = discord.utils.get(guild.voice_channels, name="Cr√©er un vocal")
        if existing:
            await ctx.send("üîä Le salon 'Cr√©er un vocal' existe d√©j√†.")
            return

        new_channel = await guild.create_voice_channel("Cr√©er un vocal", category=category)
        await ctx.send(f"‚úÖ Salon vocal **{new_channel.name}** cr√©√© avec succ√®s !")
        print(f"Salon 'Cr√©er un vocal' cr√©√© dans {guild.name}")

# +lock / +unlock commands
if _register_command_if_missing("lock"):
    @bot.command(name="lock")
    @commands.has_permissions(manage_channels=True)
    async def _gpt_lock(ctx, target: str = None):
        if target == "vocal":
            if ctx.author.voice and ctx.author.voice.channel:
                channel = ctx.author.voice.channel
                overwrite = channel.overwrites_for(ctx.guild.default_role)
                overwrite.connect = False
                await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
                await ctx.send(f"üîí Salon vocal **{channel.name}** verrouill√©.")
            else:
                await ctx.send("‚ùå Tu dois √™tre dans un salon vocal pour le verrouiller.")
        else:
            channel = ctx.channel
            overwrite = channel.overwrites_for(ctx.guild.default_role)
            overwrite.send_messages = False
            await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
            await ctx.send(f"üîí Salon texte **{channel.name}** verrouill√©.")

if _register_command_if_missing("unlock"):
    @bot.command(name="unlock")
    @commands.has_permissions(manage_channels=True)
    async def _gpt_unlock(ctx, target: str = None):
        if target == "vocal":
            if ctx.author.voice and ctx.author.voice.channel:
                channel = ctx.author.voice.channel
                overwrite = channel.overwrites_for(ctx.guild.default_role)
                overwrite.connect = True
                await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
                await ctx.send(f"üîì Salon vocal **{channel.name}** d√©verrouill√©.")
            else:
                await ctx.send("‚ùå Tu dois √™tre dans un salon vocal pour le d√©verrouiller.")
        else:
            channel = ctx.channel
            overwrite = channel.overwrites_for(ctx.guild.default_role)
            overwrite.send_messages = True
            await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
            await ctx.send(f"üîì Salon texte **{channel.name}** d√©verrouill√©.")

# Auto temporary voice channel creator: listener
async def _gpt_auto_temp_vc(member, before, after):
    try:
        if after and getattr(after, "channel", None) and getattr(after.channel, "name", "").lower() == "cr√©er un vocal":
            guild = member.guild
            category = after.channel.category
            channel_name = f"üé§ Salon de {member.display_name}"
            new_vc = await guild.create_voice_channel(
                name=channel_name,
                category=category,
                reason="Salon vocal temporaire cr√©√© automatiquement"
            )
            try:
                await member.move_to(new_vc)
            except Exception as e:
                print(f"‚ö†Ô∏è Impossible de d√©placer {member.display_name} vers {new_vc.name}: {e}")
            print(f"üé§ Salon temporaire cr√©√© : {new_vc.name} pour {member.display_name}")

            async def _gpt_monitor(vc_id, guild_id):
                await asyncio.sleep(8)
                g = bot.get_guild(guild_id)
                while True:
                    ch = g.get_channel(vc_id) if g else None
                    if ch is None:
                        break
                    if len(ch.members) == 0:
                        try:
                            await ch.delete(reason="Salon temporaire vide - suppression automatique")
                            print(f"üóëÔ∏è Salon temporaire supprim√© : {vc_id}")
                        except Exception as e:
                            print(f"Erreur suppression salon temporaire: {e}")
                        break
                    await asyncio.sleep(8)

            bot.loop.create_task(_gpt_monitor(new_vc.id, guild.id))
    except Exception as e:
        print(f"‚ùå Erreur syst√®me voc: {e}")

_existing_vc = [h.__name__ for h in bot.listeners.get('on_voice_state_update', [])] if getattr(bot, "listeners", None) else []
if "_gpt_auto_temp_vc" not in _existing_vc:
    bot.add_listener(_gpt_auto_temp_vc, 'on_voice_state_update')

# Replace help with stylized version, but only if not already provided by the bot
try:
    bot.remove_command("help")
except Exception:
    pass

@bot.command(name="help")
async def _gpt_help(ctx):
    embed = discord.Embed(
        title="üåå Aide ‚Äî Commandes de Hoshikuzu",
        description="Voici toutes les commandes disponibles ‚ú®",
        color=discord.Color.purple()
    )
    embed.add_field(
        name="‚öôÔ∏è Configuration",
        value="`+aurole @r√¥le` ‚Äî D√©finit le r√¥le attribu√© automatiquement aux nouveaux membres\n"
              "`+help` ‚Äî Affiche ce message d‚Äôaide",
        inline=False
    )
    embed.add_field(
        name="üîä Vocaux",
        value="`+createvoc` ‚Äî Cr√©e le salon sp√©cial **Cr√©er un vocal** (pour vocaux temporaires)\n"
              "`+lock [vocal]` ‚Äî Verrouille un salon texte ou vocal\n"
              "`+unlock [vocal]` ‚Äî D√©verrouille un salon texte ou vocal",
        inline=False
    )
    embed.add_field(
        name="üéß Automatique",
        value="ü™Ñ Quand quelqu‚Äôun rejoint **Cr√©er un vocal**, un salon temporaire est cr√©√© automatiquement et supprim√© lorsqu‚Äôil est vide.\n"
              "üßç Les nouveaux membres re√ßoivent automatiquement le r√¥le d√©fini avec `+aurole`.",
        inline=False
    )
    embed.set_footer(text="‚ú® Hoshikuzu ‚Äî by your starry bot üåô")
    await ctx.send(embed=embed)

# ======== FIN AJOUTS GPT ========


# ======== AJOUTS ET CORRECTIONS GPT ========

import discord
from discord.ext import commands
import asyncio
import json
import os

# === Initialisation du bot ===
intents = discord.Intents.all()
bot = commands.Bot(command_prefix="+", intents=intents)

# === CONFIG AUTO-ROLE ===
CONFIG_FILE = "data/config.json"

def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except Exception:
                return {}
    return {}

def save_config(cfg):
    os.makedirs("data", exist_ok=True)
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(cfg, f, indent=4)

config = load_config()

@bot.command()
@commands.has_permissions(manage_roles=True)
async def aurole(ctx, role: discord.Role):
    """D√©finit le r√¥le automatique attribu√© aux nouveaux membres."""
    config["auto_role_id"] = role.id
    save_config(config)
    await ctx.send(f"‚úÖ Le r√¥le automatique a √©t√© d√©fini sur {role.mention}")

@bot.event
async def on_member_join(member: discord.Member):
    """Assigne automatiquement le r√¥le d√©fini et envoie un message d'accueil."""
    try:
        # R√¥le automatique
        auto_role_id = config.get("auto_role_id")
        if auto_role_id:
            role = member.guild.get_role(auto_role_id)
            if role:
                await member.add_roles(role)
                print(f"‚úÖ R√¥le automatique '{role.name}' attribu√© √† {member.name}")

        # Message d'accueil
        embed = discord.Embed(
            title="üéâ Nouveau membre !",
            description=f"{member.mention} a rejoint le serveur ‚ú®",
            color=discord.Color.purple()
        )
        embed.add_field(name="Auteur", value=member.mention, inline=True)
        embed.set_thumbnail(
            url=member.avatar.url if member.avatar else member.default_avatar.url
        )
        if member.guild.system_channel:
            await member.guild.system_channel.send(embed=embed)
        print(f"‚úÖ Nouveau membre d√©tect√© : {member.name}")
    except Exception as e:
        print(f"Erreur dans on_member_join : {e}")

# === COMMANDES VOCALES ===
@bot.command()
@commands.has_permissions(manage_channels=True)
async def createvoc(ctx):
    """Cr√©e le salon vocal 'Cr√©er un vocal'."""
    guild = ctx.guild
    existing = discord.utils.get(guild.voice_channels, name="Cr√©er un vocal")
    if existing:
        await ctx.send("üîä Le salon 'Cr√©er un vocal' existe d√©j√†.")
        return

    category = None
    for cat in guild.categories:
        if "vocal" in cat.name.lower() or "voice" in cat.name.lower():
            category = cat
            break

    new_channel = await guild.create_voice_channel("Cr√©er un vocal", category=category)
    await ctx.send(f"‚úÖ Salon vocal **{new_channel.name}** cr√©√© avec succ√®s !")

@bot.command()
@commands.has_permissions(manage_channels=True)
async def lock(ctx, target: str = None):
    """Verrouille un salon texte ou vocal."""
    if target == "vocal":
        if ctx.author.voice and ctx.author.voice.channel:
            channel = ctx.author.voice.channel
            overwrite = channel.overwrites_for(ctx.guild.default_role)
            overwrite.connect = False
            await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
            await ctx.send(f"üîí Salon vocal **{channel.name}** verrouill√©.")
        else:
            await ctx.send("‚ùå Tu dois √™tre dans un salon vocal pour le verrouiller.")
    else:
        channel = ctx.channel
        overwrite = channel.overwrites_for(ctx.guild.default_role)
        overwrite.send_messages = False
        await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
        await ctx.send(f"üîí Salon texte **{channel.name}** verrouill√©.")

@bot.command()
@commands.has_permissions(manage_channels=True)
async def unlock(ctx, target: str = None):
    """D√©verrouille un salon texte ou vocal."""
    if target == "vocal":
        if ctx.author.voice and ctx.author.voice.channel:
            channel = ctx.author.voice.channel
            overwrite = channel.overwrites_for(ctx.guild.default_role)
            overwrite.connect = True
            await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
            await ctx.send(f"üîì Salon vocal **{channel.name}** d√©verrouill√©.")
        else:
            await ctx.send("‚ùå Tu dois √™tre dans un salon vocal pour le d√©verrouiller.")
    else:
        channel = ctx.channel
        overwrite = channel.overwrites_for(ctx.guild.default_role)
        overwrite.send_messages = True
        await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
        await ctx.send(f"üîì Salon texte **{channel.name}** d√©verrouill√©.")

# === GESTION DES VOCAUX TEMPORAIRES ===
@bot.event
async def on_voice_state_update(member, before, after):
    """Cr√©e un salon vocal temporaire quand un membre rejoint 'Cr√©er un vocal'."""
    try:
        if after.channel and after.channel.name.lower() == "cr√©er un vocal":
            guild = member.guild
            category = after.channel.category
            new_vc = await guild.create_voice_channel(
                name=f"üé§ Salon de {member.display_name}",
                category=category,
                reason="Salon vocal temporaire cr√©√© automatiquement"
            )
            await member.move_to(new_vc)
            print(f"üéß Salon temporaire cr√©√© : {new_vc.name}")

            async def monitor_vc(vc):
                await asyncio.sleep(10)
                while True:
                    if len(vc.members) == 0:
                        await vc.delete(reason="Salon temporaire vide - suppression automatique")
                        print(f"üóëÔ∏è Salon temporaire supprim√© : {vc.name}")
                        break
                    await asyncio.sleep(10)

            bot.loop.create_task(monitor_vc(new_vc))
    except Exception as e:
        print(f"‚ùå Erreur syst√®me voc: {e}")

# === HELP STYLIS√â ===
@bot.command()
async def help(ctx):
    embed = discord.Embed(
        title="üåå Aide ‚Äî Commandes de Hoshikuzu",
        description="Voici toutes les commandes disponibles ‚ú®",
        color=discord.Color.purple()
    )
    embed.add_field(
        name="‚öôÔ∏è Configuration",
        value="`+aurole @r√¥le` ‚Äî D√©finit le r√¥le auto pour les nouveaux membres",
        inline=False
    )
    embed.add_field(
        name="üîä Vocaux",
        value="`+createvoc` ‚Äî Cr√©e le salon sp√©cial 'Cr√©er un vocal'\n"
              "`+lock [vocal]` ‚Äî Verrouille un salon texte ou vocal\n"
              "`+unlock [vocal]` ‚Äî D√©verrouille un salon texte ou vocal",
        inline=False
    )
    embed.add_field(
        name="üéß Automatique",
        value="ü™Ñ Quand quelqu‚Äôun rejoint 'Cr√©er un vocal', un salon temporaire est cr√©√© automatiquement.\n"
              "üßç Les nouveaux membres re√ßoivent automatiquement le r√¥le d√©fini avec `+aurole`.",
        inline=False
    )
    embed.set_footer(text="‚ú® Hoshikuzu ‚Äî by your starry bot üåô")
    await ctx.send(embed=embed)

# === LANCEMENT DU BOT ===
bot.run(os.getenv("DISCORD_BOT_TOKEN"))


# ======== FIN DES AJOUTS GPT ========
